heat_template_version: 2015-10-15

description: >
  HOT template to create a prestoshop environment

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  srv_name:
    type: string
    description: Name of server
  image:
    type: string
    description: Name of image to use for server
  flavor:
    type: string
    description: Flavor to use for web server
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  default_scid:
    type: string
    description: Default security group id (need the id, because it does not work with name)
  dnslist:
    type: json
    description: Default dns servers
#  private_net_pool_start:
#    type: string
#    description: Start of private network IP address allocation pool
#  private_net_pool_end:
#    type: string
#    description: End of private network IP address allocation pool

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      dns_nameservers: { get_param: dnslist }
#      allocation_pools:
#        - start: { get_param: private_net_pool_start }
#          end: { get_param: private_net_pool_end }

#  router:
#    type: OS::Neutron::Router
#    properties:
#      external_gateway_info:
#        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: "f3bb6855-e5f9-43f3-a5db-9755841b61a4"
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: { get_param: srv_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group }]

#  server1_floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network: { get_param: public_net }
#      port_id: { get_resource: server1_port }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: { get_param: private_net_name }
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: default_scid }
          protocol: icmp 
        - remote_mode: remote_group_id
          remote_group_id: { get_param: default_scid }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_mode: remote_group_id
          remote_group_id: { get_param: default_scid }
          protocol: tcp
          port_range_min: 8500
          port_range_max: 8500
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 53
          port_range_max: 53
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 53
          port_range_max: 53

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
#  server1_public_ip:
#    description: Floating IP address of server1 in public network
#    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
