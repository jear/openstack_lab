heat_template_version: 2015-10-15

description: >
  HOT template to create a prestoshop environment

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  srvweb_name:
    type: string
    description: Name of web server
  srvdb_name:
    type: string
    description: Name of web server
  imageweb:
    type: string
    description: Name of image to use for web server
  imagedb:
    type: string
    description: Name of image to use for db server
  flavorweb:
    type: string
    description: Flavor to use for web server
  flavordb:
    type: string
    description: Flavor to use for db server
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  default_scid:
    type: string
    description: Default security group id (need the id, because it does not work with name)
  consul_scid:
    type: string
    description: consul security group id
  dnslist:
    type: json
    description: Default dns servers
  diskname:
    type: string
    description: disk name to attache to server2 (db)
#  private_net_pool_start:
#    type: string
#    description: Start of private network IP address allocation pool
#  private_net_pool_end:
#    type: string
#    description: End of private network IP address allocation pool

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      dns_nameservers: { get_param: dnslist }
#      allocation_pools:
#        - start: { get_param: private_net_pool_start }
#          end: { get_param: private_net_pool_end }

#  router:
#    type: OS::Neutron::Router
#    properties:
#      external_gateway_info:
#        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: "f3bb6855-e5f9-43f3-a5db-9755841b61a4"
      subnet_id: { get_resource: private_subnet }

  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: OS::Nova::Server
        properties:
          image: { get_param: imageweb }
          flavor: { get_param: flavorweb }
          key_name: { get_param: key_name }
          networks: [{network: {get_resource: private_net} }]
          security_groups: [{ get_resource: server_security_group }]
      min_size: 1
      desired_capacity: 2
      max_size: 4

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      #cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      #cooldown: 60
      scaling_adjustment: '-1'

  server1:
    type: OS::Nova::Server
    properties:
      name: { get_param: srvweb_name }
      image: { get_param: imageweb }
      flavor: { get_param: flavorweb }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_port }

  server2:
    type: OS::Nova::Server
    properties:
      name: { get_param: srvdb_name }
      image: { get_param: imagedb }
      flavor: { get_param: flavordb }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server2_port }

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group }]

#  server2vol:
#    type: OS::Cinder::Volume
#    properties:
#      size: { get_param: vol_size }

  server2vol_att:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server2 }
      volume_id: { get_param: diskname }
      mountpoint: /dev/vdb


  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: { get_param: private_net_name }
      rules:
        - remote_mode: remote_group_id
          remote_group_id: { get_param: default_scid }
          protocol: icmp 
        - remote_mode: remote_group_id
          remote_group_id: { get_param: default_scid }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_mode: remote_group_id
          remote_group_id: { get_param: consul_scid }
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306
        - remote_mode: remote_group_id
          remote_group_id:
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 5000
          port_range_max: 5000

#  server2_floating_ip:
#    type: OS::Neutron::FloatingIP
#    properties:
#      floating_network: { get_param: public_net }
#      port_id: { get_resource: server2_port }

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
#  server2_public_ip:
#    description: Floating IP address of server2 in public network
#    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }
  scale_up_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the group.  You can invoke
      the scale-down operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}
  asg_size:
    description: >
      This is the current size of the auto scaling group.
    value: {get_attr: [asg, current_size]}
  asg_server_list:
    description: >
      This is a list of server names that are part of the group.
    value: {get_attr: [asg, outputs_list, name]}
  networks:
    description: >
      This is a map of server resources and their networks.
    value: {get_attr: [asg, outputs, networks]}
  asg_server_ips:
    description: >
      This is a list of first ip addresses of the servers in the group
      for a specified network.
    value: {get_attr: [asg, outputs_list, networks, {get_resource: private_net }, 0]}

